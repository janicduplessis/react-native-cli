{"version":3,"sources":["../../../src/commands/init/init.ts"],"names":["DEFAULT_VERSION","doesDirectoryExist","dir","fs","existsSync","setProjectDirectory","directory","DirectoryAlreadyExistsError","mkdirp","sync","process","chdir","error","CLIError","cwd","adjustNameIfUrl","name","match","Object","keys","JSON","parse","readFileSync","path","join","dependencies","createFromTemplate","projectName","templateName","npm","projectTitle","skipInstall","logger","debug","log","banner","projectDirectory","Loader","loader","text","templateSourceDir","mkdtempSync","os","tmpdir","start","uri","succeed","templateConfig","templateDir","placeholderName","placeholderTitle","titlePlaceholder","postInitScript","installDependencies","root","e","fail","Error","removeSync","PackageManager","installAll","preferYarn","silent","platform","createProject","version","options","template","title","initialize","argv","directoryName","relative","projectFolder","message"],"mappings":"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","sourcesContent":["import os from 'os';\nimport path from 'path';\nimport fs from 'fs-extra';\nimport minimist from 'minimist';\nimport ora from 'ora';\nimport mkdirp from 'mkdirp';\nimport {validateProjectName} from './validate';\nimport DirectoryAlreadyExistsError from './errors/DirectoryAlreadyExistsError';\nimport printRunInstructions from './printRunInstructions';\nimport {CLIError, logger} from '@react-native-community/cli-tools';\nimport {\n  installTemplatePackage,\n  getTemplateConfig,\n  copyTemplate,\n  executePostInitScript,\n} from './template';\nimport {changePlaceholderInTemplate} from './editTemplate';\nimport * as PackageManager from '../../tools/packageManager';\nimport installPods from '../../tools/installPods';\nimport {processTemplateName} from './templateName';\nimport banner from './banner';\nimport {getLoader} from '../../tools/loader';\n\nconst DEFAULT_VERSION = 'latest';\n\ntype Options = {\n  template?: string;\n  npm?: boolean;\n  directory?: string;\n  displayName?: string;\n  title?: string;\n  skipInstall?: boolean;\n};\n\ninterface TemplateOptions {\n  projectName: string;\n  templateName: string;\n  npm?: boolean;\n  directory: string;\n  projectTitle?: string;\n  skipInstall?: boolean;\n}\n\nfunction doesDirectoryExist(dir: string) {\n  return fs.existsSync(dir);\n}\n\nasync function setProjectDirectory(directory: string) {\n  if (doesDirectoryExist(directory)) {\n    throw new DirectoryAlreadyExistsError(directory);\n  }\n\n  try {\n    mkdirp.sync(directory);\n    process.chdir(directory);\n  } catch (error) {\n    throw new CLIError(\n      'Error occurred while trying to create project directory.',\n      error,\n    );\n  }\n\n  return process.cwd();\n}\n\nfunction adjustNameIfUrl(name: string, cwd: string) {\n  // We use package manager to infer the name of the template module for us.\n  // That's why we get it from temporary package.json, where the name is the\n  // first and only dependency (hence 0).\n  if (name.match(/https?:/)) {\n    name = Object.keys(\n      JSON.parse(fs.readFileSync(path.join(cwd, './package.json'), 'utf8'))\n        .dependencies,\n    )[0];\n  }\n  return name;\n}\n\nasync function createFromTemplate({\n  projectName,\n  templateName,\n  npm,\n  directory,\n  projectTitle,\n  skipInstall,\n}: TemplateOptions) {\n  logger.debug('Initializing new project');\n  logger.log(banner);\n\n  const projectDirectory = await setProjectDirectory(directory);\n\n  const Loader = getLoader();\n  const loader = new Loader({text: 'Downloading template'});\n  const templateSourceDir = fs.mkdtempSync(\n    path.join(os.tmpdir(), 'rncli-init-template-'),\n  );\n\n  try {\n    loader.start();\n    let {uri, name} = await processTemplateName(templateName);\n\n    await installTemplatePackage(uri, templateSourceDir, npm);\n\n    loader.succeed();\n    loader.start('Copying template');\n\n    name = adjustNameIfUrl(name, templateSourceDir);\n    const templateConfig = getTemplateConfig(name, templateSourceDir);\n    await copyTemplate(name, templateConfig.templateDir, templateSourceDir);\n\n    loader.succeed();\n    loader.start('Processing template');\n\n    changePlaceholderInTemplate({\n      projectName,\n      projectTitle,\n      placeholderName: templateConfig.placeholderName,\n      placeholderTitle: templateConfig.titlePlaceholder,\n    });\n\n    loader.succeed();\n    const {postInitScript} = templateConfig;\n    if (postInitScript) {\n      // Leaving trailing space because there may be stdout from the script\n      loader.start('Executing post init script ');\n      await executePostInitScript(name, postInitScript, templateSourceDir);\n      loader.succeed();\n    }\n\n    if (!skipInstall) {\n      await installDependencies({\n        projectName,\n        npm,\n        loader,\n        root: projectDirectory,\n      });\n    } else {\n      loader.succeed('Dependencies installation skipped');\n    }\n  } catch (e) {\n    loader.fail();\n    throw new Error(e);\n  } finally {\n    fs.removeSync(templateSourceDir);\n  }\n}\n\nasync function installDependencies({\n  projectName,\n  npm,\n  loader,\n  root,\n}: {\n  projectName: string;\n  npm?: boolean;\n  loader: ora.Ora;\n  root: string;\n}) {\n  loader.start('Installing dependencies');\n\n  await PackageManager.installAll({\n    preferYarn: !npm,\n    silent: true,\n    root,\n  });\n\n  if (process.platform === 'darwin') {\n    await installPods({projectName, loader});\n  }\n\n  loader.succeed();\n}\n\nasync function createProject(\n  projectName: string,\n  directory: string,\n  version: string,\n  options: Options,\n) {\n  const templateName = options.template || `react-native@${version}`;\n\n  return createFromTemplate({\n    projectName,\n    templateName,\n    npm: options.npm,\n    directory,\n    projectTitle: options.title,\n    skipInstall: options.skipInstall,\n  });\n}\n\nexport default (async function initialize(\n  [projectName]: Array<string>,\n  options: Options,\n) {\n  const root = process.cwd();\n\n  validateProjectName(projectName);\n\n  /**\n   * Commander is stripping `version` from options automatically.\n   * We have to use `minimist` to take that directly from `process.argv`\n   */\n  const version: string = minimist(process.argv).version || DEFAULT_VERSION;\n\n  const directoryName = path.relative(root, options.directory || projectName);\n\n  try {\n    await createProject(projectName, directoryName, version, options);\n\n    const projectFolder = path.join(root, directoryName);\n    printRunInstructions(projectFolder, projectName);\n  } catch (e) {\n    logger.error(e.message);\n  }\n});\n"]}